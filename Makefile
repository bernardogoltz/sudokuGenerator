# Sudoku Generator - Makefile

.PHONY: help install run build docker-build docker-run docker-stop clean deploy

# Vari√°veis
IMAGE_NAME = sudoku-generator
CONTAINER_NAME = sudoku-generator
PORT = 8501

help: ## Mostra esta ajuda
	@echo "Sudoku Generator - Comandos Dispon√≠veis:"
	@echo "========================================"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'

install: ## Instala depend√™ncias Python
	pip install -r requirements.txt

run: ## Executa aplica√ß√£o localmente
	./run.sh

test: ## Executa testes b√°sicos
	python -c "import streamlit; print('Streamlit OK')"
	python -c "import reportlab; print('ReportLab OK')"
	@echo "‚úÖ Todas as depend√™ncias est√£o funcionando"

build: docker-build ## Constr√≥i imagem Docker

docker-build: ## Constr√≥i imagem Docker
	docker build -t $(IMAGE_NAME):latest .

docker-run: ## Executa container Docker
	docker run -d --name $(CONTAINER_NAME) -p $(PORT):8501 $(IMAGE_NAME):latest
	@echo "‚úÖ Container executando em http://localhost:$(PORT)"

docker-stop: ## Para container Docker
	docker stop $(CONTAINER_NAME) || true
	docker rm $(CONTAINER_NAME) || true

docker-logs: ## Mostra logs do container
	docker logs -f $(CONTAINER_NAME)

compose-up: ## Inicia com Docker Compose
	docker-compose up -d
	@echo "‚úÖ Aplica√ß√£o iniciada em http://localhost:$(PORT)"

compose-down: ## Para Docker Compose
	docker-compose down

clean: ## Remove containers e imagens
	docker stop $(CONTAINER_NAME) || true
	docker rm $(CONTAINER_NAME) || true
	docker rmi $(IMAGE_NAME):latest || true
	docker-compose down || true

deploy-local: ## Deploy local
	./deploy.sh local

deploy-staging: ## Deploy staging
	./deploy.sh staging

deploy-production: ## Deploy produ√ß√£o
	./deploy.sh production

status: ## Status da aplica√ß√£o
	./deploy.sh status

rollback: ## Rollback para vers√£o anterior
	./deploy.sh rollback

# Comandos de desenvolvimento
dev: ## Modo desenvolvimento
	./docker-run.sh dev

shell: ## Acessa shell do container
	docker exec -it $(CONTAINER_NAME) bash

# Comandos de manuten√ß√£o
prune: ## Remove containers, imagens e volumes n√£o utilizados
	docker system prune -af
	docker volume prune -f

backup: ## Backup da imagem atual
	docker tag $(IMAGE_NAME):latest $(IMAGE_NAME):backup-$(shell date +%Y%m%d-%H%M%S)

# Comandos de monitoramento
health: ## Verifica sa√∫de da aplica√ß√£o
	curl -f http://localhost:$(PORT)/_stcore/health || echo "‚ùå Aplica√ß√£o n√£o est√° saud√°vel"

stats: ## Estat√≠sticas dos containers
	docker stats $(CONTAINER_NAME)

# Comandos utilit√°rios
setup: ## Setup inicial completo
	chmod +x *.sh
	mkdir -p generated_pdfs
	mkdir -p .streamlit
	@echo "‚úÖ Setup conclu√≠do"

quick-start: setup install docker-build compose-up ## Setup e execu√ß√£o r√°pida
	@echo "üéâ Aplica√ß√£o pronta em http://localhost:$(PORT)"
