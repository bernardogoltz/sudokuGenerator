#!/bin/bash

# Sudoku Generator - Deploy Script
# Script completo para deploy em produ√ß√£o

set -e

echo "üöÄ Sudoku Generator - Deploy Script"
echo "===================================="

# Configura√ß√µes
IMAGE_NAME="sudoku-generator"
CONTAINER_NAME="sudoku-generator"
PORT="8501"
DOMAIN=""  # Adicione seu dom√≠nio aqui se necess√°rio

# Fun√ß√£o para mostrar uso
show_usage() {
    echo "Uso: $0 [local|production|staging]"
    echo ""
    echo "Ambientes:"
    echo "  local      - Deploy local (desenvolvimento)"
    echo "  production - Deploy em produ√ß√£o"
    echo "  staging    - Deploy em staging"
    echo ""
    exit 1
}

# Verificar pr√©-requisitos
check_requirements() {
    echo "üîç Verificando pr√©-requisitos..."
    
    # Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o encontrado!"
        exit 1
    fi
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n√£o encontrado!"
        exit 1
    fi
    
    echo "‚úÖ Pr√©-requisitos OK"
}

# Backup da vers√£o anterior
backup_previous() {
    echo "üíæ Fazendo backup da vers√£o anterior..."
    
    if docker image inspect $IMAGE_NAME:latest &> /dev/null; then
        docker tag $IMAGE_NAME:latest $IMAGE_NAME:backup-$(date +%Y%m%d-%H%M%S)
        echo "‚úÖ Backup criado"
    else
        echo "‚ÑπÔ∏è  Nenhuma vers√£o anterior encontrada"
    fi
}

# Build da aplica√ß√£o
build_app() {
    echo "üî® Construindo aplica√ß√£o..."
    
    # Build da imagem
    docker build -t $IMAGE_NAME:latest .
    
    # Tag com timestamp
    docker tag $IMAGE_NAME:latest $IMAGE_NAME:$(date +%Y%m%d-%H%M%S)
    
    echo "‚úÖ Build conclu√≠do"
}

# Deploy local
deploy_local() {
    echo "üè† Deploy Local"
    
    check_requirements
    backup_previous
    build_app
    
    # Parar vers√£o anterior
    docker-compose down 2>/dev/null || true
    
    # Iniciar nova vers√£o
    docker-compose up -d
    
    echo "‚úÖ Deploy local conclu√≠do!"
    echo "üìç URL: http://localhost:$PORT"
}

# Deploy produ√ß√£o
deploy_production() {
    echo "üåê Deploy Produ√ß√£o"
    
    check_requirements
    
    # Verificar se est√° na branch main
    if [[ $(git branch --show-current) != "main" ]]; then
        echo "‚ö†Ô∏è  N√£o est√° na branch main!"
        read -p "Continuar assim mesmo? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    backup_previous
    build_app
    
    # Health check da imagem
    echo "üè• Testando sa√∫de da aplica√ß√£o..."
    docker run --rm -d --name test-$CONTAINER_NAME -p 8502:8501 $IMAGE_NAME:latest
    sleep 10
    
    if curl -f http://localhost:8502/_stcore/health &> /dev/null; then
        echo "‚úÖ Health check OK"
        docker stop test-$CONTAINER_NAME
    else
        echo "‚ùå Health check falhou!"
        docker stop test-$CONTAINER_NAME
        exit 1
    fi
    
    # Deploy com zero downtime
    echo "üîÑ Deploy com zero downtime..."
    
    # Iniciar nova vers√£o na porta tempor√°ria
    docker run -d --name $CONTAINER_NAME-new -p 8502:8501 $IMAGE_NAME:latest
    sleep 5
    
    # Verificar se nova vers√£o est√° funcionando
    if curl -f http://localhost:8502/_stcore/health &> /dev/null; then
        # Parar vers√£o antiga
        docker stop $CONTAINER_NAME 2>/dev/null || true
        docker rm $CONTAINER_NAME 2>/dev/null || true
        
        # Renomear nova vers√£o
        docker stop $CONTAINER_NAME-new
        docker rm $CONTAINER_NAME-new
        
        # Iniciar vers√£o final
        docker run -d --name $CONTAINER_NAME -p $PORT:8501 --restart unless-stopped $IMAGE_NAME:latest
        
        echo "‚úÖ Deploy produ√ß√£o conclu√≠do!"
        if [[ -n "$DOMAIN" ]]; then
            echo "üìç URL: https://$DOMAIN"
        else
            echo "üìç URL: http://localhost:$PORT"
        fi
    else
        echo "‚ùå Nova vers√£o falhou!"
        docker stop $CONTAINER_NAME-new
        docker rm $CONTAINER_NAME-new
        exit 1
    fi
}

# Deploy staging
deploy_staging() {
    echo "üß™ Deploy Staging"
    
    check_requirements
    backup_previous
    build_app
    
    # Parar staging anterior
    docker stop $CONTAINER_NAME-staging 2>/dev/null || true
    docker rm $CONTAINER_NAME-staging 2>/dev/null || true
    
    # Iniciar staging
    docker run -d --name $CONTAINER_NAME-staging -p 8503:8501 --restart unless-stopped $IMAGE_NAME:latest
    
    echo "‚úÖ Deploy staging conclu√≠do!"
    echo "üìç URL: http://localhost:8503"
}

# Rollback
rollback() {
    echo "‚è™ Fazendo rollback..."
    
    # Encontrar √∫ltima imagem de backup
    BACKUP_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep $IMAGE_NAME:backup | head -1)
    
    if [[ -n "$BACKUP_IMAGE" ]]; then
        # Parar vers√£o atual
        docker stop $CONTAINER_NAME
        docker rm $CONTAINER_NAME
        
        # Iniciar vers√£o de backup
        docker run -d --name $CONTAINER_NAME -p $PORT:8501 --restart unless-stopped $BACKUP_IMAGE
        
        echo "‚úÖ Rollback conclu√≠do para: $BACKUP_IMAGE"
    else
        echo "‚ùå Nenhum backup encontrado!"
        exit 1
    fi
}

# Status da aplica√ß√£o
show_status() {
    echo "üìä Status da Aplica√ß√£o"
    echo "====================="
    
    # Container status
    if docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep $CONTAINER_NAME; then
        echo "‚úÖ Container ativo"
    else
        echo "‚ùå Container n√£o est√° executando"
    fi
    
    # Health check
    if curl -f http://localhost:$PORT/_stcore/health &> /dev/null; then
        echo "‚úÖ Aplica√ß√£o saud√°vel"
    else
        echo "‚ùå Aplica√ß√£o com problemas"
    fi
    
    # Logs recentes
    echo ""
    echo "üìã Logs recentes:"
    docker logs --tail 10 $CONTAINER_NAME
}

# Main script
case "$1" in
    local)
        deploy_local
        ;;
    production)
        deploy_production
        ;;
    staging)
        deploy_staging
        ;;
    rollback)
        rollback
        ;;
    status)
        show_status
        ;;
    *)
        show_usage
        ;;
esac
